name: Build Whisper.cpp for CoreELEC

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Download Whisper.cpp Source
        run: |
          wget https://github.com/ggerganov/whisper.cpp/archive/refs/tags/v1.4.0.tar.gz
          tar -xvf v1.4.0.tar.gz

      - name: Build Whisper.cpp
        run: |
          cd whisper.cpp-1.4.0
          # --- ФИНАЛЬНЫЙ ШАГ: ПРЯМОЙ ВЫЗОВ С ПОЛНЫМ НАБОРОМ ПРОВЕРЕННЫХ ФЛАГОВ ---
          
          # 1. Компилируем все .c файлы с помощью gcc
          aarch64-linux-gnu-gcc -I. -O3 -DNDEBUG -std=gnu11 -fPIC -pthread -D_GNU_SOURCE -c ggml.c -o ggml.o
          aarch64-linux-gnu-gcc -I. -O3 -DNDEBUG -std=gnu11 -fPIC -pthread -D_GNU_SOURCE -c ggml-alloc.c -o ggml-alloc.o
          aarch64-linux-gnu-gcc -I. -O3 -DNDEBUG -std=gnu11 -fPIC -pthread -D_GNU_SOURCE -c ggml-backend.c -o ggml-backend.o

          # 2. "Склеиваем" все вместе с помощью g++, явно включая NEON
          aarch64-linux-gnu-g++ \
            -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC -pthread \
            -march=armv8-a+neon \
            -o main \
            whisper.cpp \
            examples/common.cpp \
            examples/common-ggml.cpp \
            ggml.o ggml-alloc.o ggml-backend.o \
            -static

      - name: Prepare Artifact
        run: |
          mkdir artifact
          cp whisper.cpp-1.4.0/main ./artifact/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: whisper-main-binary-final
          path: artifact
