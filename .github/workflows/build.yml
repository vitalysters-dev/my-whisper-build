name: Build Whisper.cpp for CoreELEC

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Download Whisper.cpp Source
        run: |
          wget https://github.com/ggerganov/whisper.cpp/archive/refs/tags/v1.5.1.tar.gz
          tar -xvf v1.5.1.tar.gz

      - name: Build Whisper.cpp
        run: |
          cd whisper.cpp-1.5.1
          # --- ГЛАВНОЕ ИСПРАВЛЕНИЕ ЗДЕСЬ ---
          # Мы создаем свой собственный, ПРОСТОЙ Makefile
          echo 'CC       := aarch64-linux-gnu-gcc' > Makefile.simple
          echo 'CXX      := aarch64-linux-gnu-g++' >> Makefile.simple
          echo 'CFLAGS   := -I. -O3 -DNDEBUG -std=c11 -fPIC -pthread -DGGML_ARM_NO_FP16 -D_GNU_SOURCE' >> Makefile.simple
          echo 'CXXFLAGS := -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC -pthread -DGGML_ARM_NO_FP16' >> Makefile.simple
          echo 'LDFLAGS  := -pthread' >> Makefile.simple
          echo 'OBJS     := ggml.o ggml-alloc.o ggml-backend.o ggml-quants.o whisper.o' >> Makefile.simple
          echo 'main: $(OBJS) examples/main/main.o' >> Makefile.simple
          echo '	$(CXX) $(CXXFLAGS) $(OBJS) examples/main/main.o -o $@ $(LDFLAGS)' >> Makefile.simple
          
          # Теперь запускаем сборку, используя НАШУ простую инструкцию
          make -f Makefile.simple

      - name: Prepare Artifact
        run: |
          mkdir artifact
          cp whisper.cpp-1.5.1/main ./artifact/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: whisper-main-binary
          path: artifact
